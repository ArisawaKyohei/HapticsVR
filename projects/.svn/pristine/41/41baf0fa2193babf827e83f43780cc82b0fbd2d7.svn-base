/*
 * SampleVRSpaceView.java
 *
 * Oct. 2010 by Muroran Institute of Technology
 */
package jp.ac.muroran_it.csse.simple_viewer;

import com.sun.opengl.util.GLUT;
import com.sun.opengl.util.j2d.TextRenderer;
import com.sun.opengl.util.texture.Texture;
import com.sun.opengl.util.texture.TextureIO;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import javax.media.opengl.GL;
import javax.media.opengl.GLException;
import jp.ac.muroran_it.csse.vr_skelton.Config.Mode;
import jp.ac.muroran_it.csse.vr_skelton.Position;
import jp.ac.muroran_it.csse.vr_skelton.Posture;
import jp.ac.muroran_it.csse.vr_skelton.VRSpaceView;

/**
 * VR空間状態の内容を描画するVRSpaceView実装。
 */
public class SimpleVRSpaceView extends VRSpaceView {
    /**
     * VR空間状態
     */
    private final SimpleVRSpaceState state;

    /**
     * テキストレンダラ
     */
    private final TextRenderer renderer;

    /**
     * テクスチャ
     */
    private Texture texture = null;

    /**
     * 描画するVR空間状態とステレオ表示の設定を指定するコンストラクタ。
     *
     * @param state VR空間状態。
     * @param stereoMode ステレオ表示を有効にする場合はtrue。
     */
    public SimpleVRSpaceView(SimpleVRSpaceState state, Mode stereoMode) {
        super(state, stereoMode);
        this.state = state;
        // レンダリングする文字のフォント、字体、サイズを指定
        renderer = new TextRenderer(new Font("SansSerif", Font.PLAIN, 50));
    }

    /* ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼ #5 ▼▼▼ */
    /**
     * VRSpaceViewのdrawScene()の中で、VR空間中のオブジェクト群を描画するときに呼ばれる。
     *
     * @param gl GLオブジェクト。
     */
    @Override
    public void drawVRSpaceObjects(GL gl) {
        // 光源を設定
        setLighting(gl);
        // スタイラスを描画
        drawStylus(gl);
    }

    /**
     * 光源の設定。
     *
     * @param gl GLオブジェクト。
     */
    public void setLighting(GL gl) {
        // 点光源の座標値を設定
        float lightPosition[] = {0f, 70f, 0f, 1.0f};
        gl.glLightfv(GL.GL_LIGHT0, GL.GL_POSITION, lightPosition, 0);

        // 環境光を設定
        float[] lightAmbient = new float[] {0.2f, 0.2f, 0.2f, 1.0f};
        gl.glLightfv(GL.GL_LIGHT0, GL.GL_AMBIENT, lightAmbient, 0);
    }

    /**
     * スタイラスの描画。
     *
     * @param gl GLオブジェクト。
     */
    private void drawStylus(GL gl) {
        // 仮想スタイラスの座標値と姿勢を取得
        Position stylusPosition = state.getStylusPosition();
        Posture stylusPosture = state.getStylusPosture();

        // GLの座標系を仮想スタイラスの座標値と姿勢に一致するように設定
        gl.glTranslated(stylusPosition.getX(), stylusPosition.getY(), stylusPosition.getZ());
        gl.glRotated(stylusPosture.getX(), 0.0, 0.0, 1.0);
        gl.glRotated(stylusPosture.getY(), 0.0, 1.0, 0.0);
        gl.glRotated(stylusPosture.getZ(), 1.0, 0.0, 0.0);

        // スタイラスオブジェクトを描画
        drawStylusObjects(gl);
    }

    /**
     * スタイラスオブジェクトの描画。
     *
     * @param gl GLオブジェクト。
     */
    private void drawStylusObjects(GL gl) {
        // デフォルト色は緑色
        float[] ambientDiffuse = new float[] {0.0f, 1.0f, 0.0f, 1.0f};
        if (state.isStylusPressed()) {
            // スタイラスのボタンが押されているときは赤色
            ambientDiffuse = new float[] {1.0f, 0.0f, 0.0f, 1.0f};
        }
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT_AND_DIFFUSE, ambientDiffuse, 0);

        // スタイラスと同じ座標値、姿勢で角錐を描画
        gl.glRotated(90.0, 0.0, 1.0, 0.0);
        gl.glTranslated(0.0, 0.0, -16.0);
        new GLUT().glutSolidCone(0.5, 16, 8, 1);
    }

    /* ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲ #5 ▲▲▲ */

 /* ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼ #6 ▼▼▼ */
    /**
     * VRSpaceViewのdisplay()の中で、2DのTextオブジェクト群を描画するときに呼ばれる。
     *
     * @param gl GL オブジェクト
     */
    @Override
    public void draw2DTextSpaceObjects(GL gl) {
        //メニューの描画
        drawMenu(gl, state.getMenu(), 20, 1000);
    }

    /**
     * VRSpaceViewのdrawScene()の中で、モデル空間中のオブジェクト群を描画するときに呼ばれる。
     *
     * @param gl GLオブジェクト。
     */
    @Override
    public void drawModelSpaceObjects(GL gl) {
        // ティーポット座標値を取得
        Position teapotPosition = state.getTeapotPosition();

        // 現在のモデルビュー行列を保存
        gl.glPushMatrix();

        // GLの座標系の原点をティーポットの座標値と一致するように設定
        gl.glTranslated(teapotPosition.getX(), teapotPosition.getY(), teapotPosition.getZ());

        // デフォルト色は青色
        float[] ambientDiffuse = new float[] {0.0f, 0.0f, 1.0f, 1.0f};
        if (state.isTeapotSelected()) {
            // ティーポットが選択されているときは黄色
            ambientDiffuse = new float[] {1.0f, 1.0f, 0.0f, 1.0f};
        }
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT_AND_DIFFUSE, ambientDiffuse, 0);

        // ティーポットを描画
        new GLUT().glutWireTeapot(5.0f);

        // 保存したモデルビュー行列を復帰
        gl.glPopMatrix();

        drawTexture(gl);

        // 球を描画
        drawSphere(gl);

        // ビルボードで文字列を描画
        drawBillboard(gl);
    }

    /**
     * テクスチャを描画。
     *
     * @param gl GL オブジェクト。
     * @param texturePosition テクスチャ座標値。
     */
    private void drawTexture(GL gl) {
        // テクスチャ座標値を取得
        Position texturePosition = state.getTexturePosition();

        // 現在のモデルビュー行列を保存
        gl.glPushMatrix();

        // テクスチャが未設定の場合は設定
        if (texture == null) {
            setTexture();
        }

        // 平行移動と回転
        gl.glTranslated(texturePosition.getX(), texturePosition.getY(), texturePosition.getZ());
        gl.glRotated(-80, 1.0, 0.0, 0.0);

        // ポリゴンの色を設定
        float[] ambientDiffuse = new float[] {255.0f, 255.0f, 255.0f, 1.0f};
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT_AND_DIFFUSE, ambientDiffuse, 0);

        // テクスチャの処理の有効化
        texture.enable();
        texture.bind();

        // ポリゴンの描写を開始
        gl.glBegin(GL.GL_POLYGON);
        // テクスチャの座標を指定した後にポリゴンの各頂点を指定
        gl.glTexCoord2f(1.0f, 0.0f);
        gl.glVertex3f(7.0f, 10.0f, 10.0f);
        gl.glTexCoord2f(0.0f, 0.0f);
        gl.glVertex3f(0.0f, 10.0f, 10.0f);
        gl.glTexCoord2f(0.0f, 1.0f);
        gl.glVertex3f(0.0f, 0.0f, 10.0f);
        gl.glTexCoord2f(0.0f, 1.0f);
        gl.glVertex3f(7.0f, 0.0f, 10.0f);
        // ポリゴンの描写を終了
        gl.glEnd();

        // テクスチャの処理の無効化
        texture.disable();

        // 保存したモデルビュー行列を復帰
        gl.glPopMatrix();
    }

    /**
     * テクスチャの設定
     */
    private void setTexture() {
        try {
            File imageFile = new File("VRSkeltonSeminar.png");
            // 画像ファイルからテクスチャを生成
            texture = TextureIO.newTexture(imageFile, true);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (GLException e) {
            e.printStackTrace();
        }
    }

    /**
     * 球の描画。
     *
     * @param gl GL オブジェクト
     */
    private void drawSphere(GL gl) {
        // 球座標を取得
        Position spherePosition = state.getSpherePosition();
        // 球の半径の取得
        float sphereRadius = state.getSphereRadius();

        // 現在のモデルビュー行列を保存
        gl.glPushMatrix();

        // GLの座標系の原点を球の座標と一致するように設定
        gl.glTranslated(spherePosition.getX(), spherePosition.getY(), spherePosition.getZ());

        // 球の色を赤色に指定
        float[] ambientDiffuse = new float[] {1.0f, 0.0f, 0.0f, 1.0f};
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT_AND_DIFFUSE, ambientDiffuse, 0);

        // 球を描画
        new GLUT().glutWireSphere(sphereRadius, 20, 20);

        // 保存したモデルビュー行列を復帰
        gl.glPopMatrix();
    }

    /**
     * ビルボードで文字列を描画。
     *
     * @param gl GL オブジェクト。
     */
    private void drawBillboard(GL gl) {
        // ビルボードで表示する文字列座標値を取得
        Position stringPosition = state.getStringPosition();
        // モデル空間中における仮想視点センサ位置の取得
        Position viewpointPosition = state.getViewpointPosition();
        viewpointPosition = state.toModelSpace(viewpointPosition);

        // 現在のモデルビュー行列を保存
        gl.glPushMatrix();

        // 視線方向ベクトルの計算
        double directionX = viewpointPosition.getX() - stringPosition.getX();
        double directionY = viewpointPosition.getY() - stringPosition.getY();
        double directionZ = viewpointPosition.getZ() - stringPosition.getZ();

        // y 軸回りの回転量計算
        double phy = Math.asin(
          directionX
          / Math.sqrt(
            Math.pow(directionZ, 2)
            + Math.pow(directionX, 2)
          )
        );
        if (directionZ < 0) {
            if (directionX > 0) {
                phy = Math.PI - phy;
            } else {
                phy = -Math.PI - phy;
            }
        }

        // x 軸回りの回転量計算
        double theta = Math.asin(
          directionY
          / Math.sqrt(
            Math.pow(directionX, 2)
            + Math.pow(directionY, 2)
            + Math.pow(directionZ, 2)
          )
        );

        // 平行移動と姿勢変換
        gl.glTranslated(stringPosition.getX(), stringPosition.getY(), stringPosition.getZ());
        gl.glRotated(phy * 180 / Math.PI, 0.0, 1.0, 0.0);
        gl.glRotated(-theta * 180 / Math.PI, 1.0, 0.0, 0.0);

        // ビルボードで文字列の描画
        String str = "PBL";
        renderer.begin3DRendering();
        renderer.draw3D(str, 0, 0, 0, 0.03f);
        renderer.end3DRendering();

        // 保存したモデルビュー行列を復帰
        gl.glPopMatrix();
    }

    /**
     *
     *
     * メニューの描画。
     *
     * @param gl GL オブジェクト。
     * @param menu メニュー。
     * @param x 表示位置の x 座標。
     * @param y 表示位置の y 座標。
     */
    private void drawMenu(GL gl, Menu menu, int x, int y) {
        Menu[] subMenus = menu.getSubMenus();
        for (int i = 0; i < subMenus.length; ++i) {
            if (subMenus[i].isSelected()) {
                renderer.beginRendering(1400, 1050);
                renderer.setColor(Color.yellow);
                renderer.draw(subMenus[i].getMenuName(), x, y - i * 50);
                renderer.endRendering();
                drawMenu(gl, subMenus[i], x + 150, y - i * 50);
            } else {
                renderer.beginRendering(1400, 1050);
                renderer.setColor(Color.white);
                renderer.draw(subMenus[i].getMenuName(), x, y - i * 50);
                renderer.endRendering();
            }
        }
    }

    /* ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲ #6 ▲▲▲ */
}
