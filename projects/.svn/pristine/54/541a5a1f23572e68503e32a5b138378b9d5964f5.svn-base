/*
 * OpenDataVRSpaceState.java
 * ビューアで表示するオブジェクトを付加したVR空間状態全体を管理するVRSpaceStateの実装
 * Oct. 2016 by Muroran Institute of Technology
 */
package jp.ac.muroran_it.csse.pbl2018;

import java.util.ArrayList;
import jp.ac.muroran_it.csse.vr_skelton.Position;
import jp.ac.muroran_it.csse.vr_skelton.ModelSpaceObject;
import jp.ac.muroran_it.csse.vr_skelton.VRSpaceState;

public class OpenDataVRSpaceState extends VRSpaceState {
    // VR空間に描画されるオブジェクトのリスト
    // 描画オブジェクトは全てこのリストに格納することで一元管理できる
    public static ArrayList<ModelSpaceObject> objects = new ArrayList<>();
    //////////////////////////////////////////////////////
    // 描画される物体オブジェクトの追加方法：
    // (1) 物体オブジェクトのクラスを定義(VRSpaceObjectを継承して実装)
    // (2) オブジェクトの宣言(クラス変数の宣言)
    // (3) コンストラクタ内でインスタンス生成とリストへの追加
    // (4) 必要に応じてゲッター(例:getMap())などの追加
    // (5) オブジェクトに影響を与えるコントロール側処理の作成
    //////////////////////////////////////////////////////
    
    /** 日本地図 */
    //private ObjMap map;
    
    /** 県庁所在地位置データ */
    //private ObjCapitals caps;
    
    private ArrayList<City> city=City.loadFile("world.csv");
    
    /** テクスチャ座標値 */
    private Position texturePosition= new Position(-10.0, 15.0, -10.0);
    //private Position texturePosition= new Position(0.0, 0.0, 0.0);
    
    /** テクスチャID */
    private int imagenum;
    
    private WPrecipitation WP;
    
    private WTemperature WT;
    
    /** メニュー */
    private MENU menu = MENU.create(this);
    
    /**
     * コンストラクタ
     * @param name アプリケーション名
     */
    public OpenDataVRSpaceState(String name) {
        // アプリケーション名を登録
        super(name);
        
        //▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
        // VRオブジェクトの生成と登録
        //------------------------------------------------------
        // ここに空間中で扱う物体オブジェクトの生成・追加を記述する。
        // 表示を中止するときはリストへの追加をコメント化すればよい。

        //map = new ObjMap(); // 日本地図
        //objects.add(map); // リストに格納
        
        //eq = new ObjEarthQuakes(this); // 地震源データ
        //objects.add(eq); // リストに格納
        
        //caps = new ObjCapitals(this); // 県庁所在地データ
        //objects.add(caps); // リストに格納
        
        WP=new WPrecipitation(this,city);
        objects.add(WP);
        
        WT=new WTemperature(this,city);
        objects.add(WT);
        
        //▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
    }

    /**
     * スタイラスのボタン状態の設定。
     * ボタンを押したときにはスタイラスに接触している震源情報を選択する。
     * @param pressed スタイラスのボタンを押す場合true。
     */
    @Override
    public synchronized void setStylusPressed(boolean pressed) {
        super.setStylusPressed(pressed); // 継承元のsetStylusPressedを実行
        if (pressed) {
            // モデル空間でのスタイラスの座標値を取得
            Position stylusPosition = toModelSpace(getStylusPosition());
            // スタイラスに最も近い震源情報の座標値を選択
            /*if(eq!=null){
                eq.selectNearestEqCenter(stylusPosition);
            }*/
        }
    }

    /**
     * VR空間オブジェクトのリストを取得
     * @return VR空間に描画されるオブジェクトリスト
     */
    public ArrayList<ModelSpaceObject> getVRSpaceObjects(){
        return objects;
    }
    
    /**
     * スクリーン上に描画する補助情報を取得。
     * @return 選択中の震源情報。選択中の震源情報がない場合はnull。
     */
    /*public synchronized String[] getInformation() {
        String[] strings = null;
        // 選択中の震源情報を表示
        if(eq!=null){
             strings = eq.getSelectedEqCenterInfo(eq.getSelectedEqCenter());
        }
        // 選択中の震源情報が無いときはとりあえず表示している震度範囲について表示

        if(eq!=null && strings == null){

            strings = new String[1];
            strings[0] = "表示震度＝"+(eq.getMax()-1)+"～"+eq.getMax();
        }
        return strings;
    }*/

    /**
     * 地図を取得
     * @return 地図オブジェクト
     */
    /*public ObjMap getMap(){
        return map;
    }*/

    /**
     * 地震源データを取得
     * @return 地震源データ
     */
    //public ObjEarthQuakes getEarthQuakes(){
        //return eq;
    //}
    
    /**
     * テクスチャ座標値の取得
     * @return テクスチャ座標値
     */
    public synchronized Position getTexturePosition(){
        return texturePosition;
    }
    
    /**
     * テクスチャIDの設定
     * @param imagenum 
     */
    public synchronized void setimagenum(int imagenum){
        this.imagenum=imagenum;
    }
    
    /**
     * テクスチャIDの取得
     * @return テクスチャID
     */
    public synchronized int getimagenum(){
        return imagenum;
    }
    
    public synchronized WPrecipitation getWPrecipitation(){
        return WP;
    }
    
    public synchronized WTemperature getWTemperature(){
        return WT;
    }
    
    /**
     *
     * メニューの取得。
     *
     * @return メニュー。
     */
    public synchronized MENU getMenu() {
        return menu;
    }
}
