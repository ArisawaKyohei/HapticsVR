/*
 * ObjMap.java
 * 日本地図とグリッド線の描画を行う描画管理クラス
 * Oct. 2016 by Muroran Institute of Technology
 */
package jp.ac.muroran_it.csse.pbl2018;

import javax.media.opengl.GL;
import jp.ac.muroran_it.csse.vr_skelton.Position;
import jp.ac.muroran_it.csse.vr_skelton.ModelSpaceObject;

public class ObjMap extends ModelSpaceObject{
    /** 地図データの格納場所 */
    private final String mapDir = "maps/";
    /** 日本の地図データファイルリスト */
    private final String mapNames[] =
    {
        "hokkaido.dat","honshu.dat","kyusyu.dat","shikoku.dat",
        "amakusashotou.dat","amamiosima.dat","awajishima.dat","fukuejima.dat",
        "hachijoushima.dat","hiradoshima.dat","ikisima.dat","iriomotejima.dat",
        "ishigakijima.dat","izuosima.dat","kunasiritou.dat","miyakojima.dat",
        "okinawa.dat","okinoshima_first-half.dat","okinoshima_second-half.dat","sadogashima.dat",
        "tanegashima.dat","tsushima.dat","yakushima.dat"
    };

    /** 日本の地形 */
    private final Coordinate[][] geographyOfIslands = new Coordinate[mapNames.length][];
    
    /**
     * コンストラクタ
     */
    public ObjMap(){
        // 地図情報の読み込み
        for(int i=0; i<mapNames.length; i++){
            geographyOfIslands[i] = Coordinate.loadFile(mapDir+mapNames[i]);
        }
    }

    //=========================================================================
    /**
     * 日本地図とグリッド線の描画(Viewから呼び出される)
     * @param gl GLオブジェクト。
     */
    @Override
    public void drawObject(GL gl) {
        // 緯度線と経度線の描画
        drawGrid(gl);

        // 日本の輪郭情報を描画
        for (Coordinate[] island : geographyOfIslands) {
            drawGreenLines(gl, island);
        }
    }

    //=========================================================================
    /**
     * 緯度線と経度線を描画。
     * @param gl GLオブジェクト。
     */
    private void drawGrid(GL gl) {
        // 描画範囲、間隔を設定
        double stride = 1.0;    // 経度線と緯度線の間隔（度）
        double eastEnd = 154.0; // 日本の東端 (経度:153.98)
        double westEnd = 122.0; // 日本の西端 (経度:122.93)
        double southEnd = 20.0; // 日本の南端 (緯度:20.42)
        double northEnd = 46.0; // 日本の北端 (緯度:45.75)

        // 経度方向と緯度方向の線の描画本数をそれぞれ算出
        int hNum = (int) ((eastEnd - westEnd) / stride) + 1;
        int vNum = (int) ((northEnd - southEnd) / stride) + 1;

        // 線の反射特性を設定
        float[] ambientDiffuseOfLine = new float[] {0.7f, 0.7f, 0.7f, 0.7f};
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT_AND_DIFFUSE, ambientDiffuseOfLine, 0);

        // 現在のモデルビュー行列を保存
        gl.glPushMatrix();

        // 経度線を描画
        for (int i = 0; i < hNum; ++i) {
            double longitude = westEnd + i * stride;
            Position start = new Coordinate(northEnd, longitude, 0.0).toPosition();
            Position end = new Coordinate(southEnd, longitude, 0.0).toPosition();

            gl.glBegin(GL.GL_LINES);
            gl.glVertex3d(start.getX(), start.getY(), start.getZ());
            gl.glVertex3d(end.getX(), end.getY(), end.getZ());
            gl.glEnd();
        }

        // 緯度線を描画
        for (int i = 0; i < vNum; ++i) {
            double latitude = southEnd + i * stride;
            Position start = new Coordinate(latitude, westEnd, 0.0).toPosition();
            Position end = new Coordinate(latitude, eastEnd, 0.0).toPosition();

            gl.glBegin(GL.GL_LINES);
            gl.glVertex3d(start.getX(), start.getY(), start.getZ());
            gl.glVertex3d(end.getX(), end.getY(), end.getZ());
            gl.glEnd();
        }
        
        // 保存したモデルビュー行列を復帰
        gl.glPopMatrix();

    }
    //=========================================================================
    /**
     * 緑の折れ線の描画。
     * @param gl GLオブジェクト。
     * @param coordinates 折れ線の頂点群の位置。
     */
    private void drawGreenLines(GL gl, Coordinate[] coordinates) {
        // 折れ線の反射特性を緑色に設定
        float[] ambientDiffuseOfLine = new float[] {0.0f, 1.0f, 0.0f, 1.0f};
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT_AND_DIFFUSE, ambientDiffuseOfLine, 0);

        // 現在のモデルビュー行列を保存
        gl.glPushMatrix();

        // 折れ線を描画
        gl.glBegin(GL.GL_LINE_STRIP);
        for (Coordinate coordinate : coordinates) {
            Position tmp = coordinate.toPosition();
            gl.glVertex3d(tmp.getX(), tmp.getY(), tmp.getZ());
        }
        gl.glEnd();

        // 保存したモデルビュー行列を復帰
        gl.glPopMatrix();
    }

}
